<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS109_Project_HappyMatch</title>
    <url>/2023/12/29/CS109-Project-HappyMatch/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文记录了一些写CS109计算机程序设计基础期末project过程中的开发经验以及使用到的技术(这部分老师大概率不会讲，得自学)。</p>
<h1 id="SUSTechCS109ProjectGuide"><a href="#SUSTechCS109ProjectGuide" class="headerlink" title="SUSTechCS109ProjectGuide"></a>SUSTechCS109ProjectGuide</h1><p><a href="https://blog.froster.icu/SUSTechCS109ProjectGuide/" title="SUSTechCS109ProjectGuide">SUSTechCS109ProjectGuide</a>是一篇学长写的project指南，里面写有许多有价值的建议，非常值得一看。</p>
<h1 id="关于提问"><a href="#关于提问" class="headerlink" title="关于提问"></a>关于提问</h1><p>开发的过程中难免会遇到很多陌生的问题或者bug，如果有时间，建议学习一下<a href="https://github.com/tvvocold/How-To-Ask-Questions-The-Smart-Way" title="How-To-Ask-Questions-The-Smart-Way">提问的智慧</a>。</p>
<p>如果时间短缺，记住<code>善用AI工具 &gt; 搜索引擎 &gt; 询问他人</code>。提出问题的时候，请提供<code>清晰的截图</code><del>不要再用手机拍你的屏幕了</del>、<code>有用的报错信息</code>、<code>详细完整的问题描述</code>，这会大大增加你解决问题的效率。</p>
<h1 id="关于项目"><a href="#关于项目" class="headerlink" title="关于项目"></a>关于项目</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>每学期的project都是对于某一种游戏玩法的复刻，而2023秋学期的主题是<code>三消游戏</code>，和主题相关的游戏有俄罗斯方块，开心消消乐等。</p>
<h2 id="题目发布时间"><a href="#题目发布时间" class="headerlink" title="题目发布时间"></a>题目发布时间</h2><p>详细的题目文档会在<code>期中前后</code>发布，总共的开发周期有5-6周左右。</p>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><a href="/2023/12/29/CS109-Project-HappyMatch/cs109-2023F-project.pdf" title="pdf">pdf</a>
<h2 id="分数组成"><a href="#分数组成" class="headerlink" title="分数组成"></a>分数组成</h2><p>跟据本学期和往年的经验，分数由80%的基础分和20%的bonus分数组成。</p>
<ul>
<li>80%基础分数跟据题目文档判定</li>
<li>另外20%分数为bonus分，跟据几个维度判断：美观程度、额外功能、开发流程(比如有没有用git)、有无明显bug等等</li>
</ul>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>题目发布的同时，老师也会给出一个实现了部分功能的demo。你可以把这个理解成是一个框架，在这个基础框架上去完成你的项目。</p>
<p>但是对于有水平的同学，我建议不使用老师所给的框架。理由如下：</p>
<ol>
<li>老师给出的框架大概率是Swing写的图形化界面，相比于Swing，更建议使用JavaFX。</li>
<li>有些地方可能受到框架限制，没法实现自己想要的功能。</li>
<li>不使用老师给的框架有加分…</li>
</ol>
<h2 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h2><p>建议在拿到project题目的第一时间，对你的项目整体进行规划(比如要做出哪些界面，实现哪些功能)，和队友商量好分工，并且制定好详细的计划。按照计划有的放矢，就不会出现只剩一周还没开始写的情况。<del>听说很多人答辩前熬大夜</del></p>
<p>先放一个我在初期写的计划的框架。<strong>可以使用类似语雀等软件与你的队友共享文档，同步需求。</strong></p>
<img src="/2023/12/29/CS109-Project-HappyMatch/plan.png" class="" title="plan">

<p>想要对项目有个整体的把握，不仅需要熟悉需求文档，还要仔细分析每个功能具体的实现。</p>
<h1 id="关于AI工具的使用"><a href="#关于AI工具的使用" class="headerlink" title="关于AI工具的使用"></a>关于AI工具的使用</h1><p>本人极力提倡在开发的过程中使用AI工具，目的及理由如下(chatGPT生成)：</p>
<ul>
<li>提高开发效率：AI可以自动化一些重复性和繁琐的任务，如代码补全、缺陷检测和测试等，从而减少开发人员的工作量，提高开发效率。</li>
<li>提高代码质量：AI可以帮助开发人员发现潜在的缺陷和错误，并提供修复建议。它还可以生成高质量的代码，减少人为错误的产生。</li>
<li>加速学习和开发过程：AI可以根据开发人员的需求快速生成代码，从而加速学习和开发过程。它可以提供示例代码、算法实现和框架结构，帮助开发人员快速上手和实现想法。</li>
</ul>
<p>在开发的过程中，对我帮助最大的莫过于copilot和chatGPT，前者提供了非常只能的代码补全功能，极大地加快了开发效率；后者不仅能帮你快速学习新的知识，还能帮你debug一些不常见的疑难杂症。</p>
<p>ps. AI工具只能作为你的开发助手，不要想让它帮你完成整个project。</p>
<h2 id="copilot"><a href="#copilot" class="headerlink" title="copilot"></a>copilot</h2><p><del>非常好用，用到就是赚到，强力安利</del><br><br>通过Github的学生认证即可食用，网上教程很多，搜索一下即可。</p>
<img src="/2023/12/29/CS109-Project-HappyMatch/copilot.gif" class="" title="copilot">

<h1 id="简单的算法"><a href="#简单的算法" class="headerlink" title="简单的算法"></a>简单的算法</h1><p>写project前老师可能会布置一些相关的作业题，让你熟悉对应的游戏算法。</p>
<h2 id="消除连续的方块"><a href="#消除连续的方块" class="headerlink" title="消除连续的方块"></a>消除连续的方块</h2><p><code>8*8</code>的地图分为两份，一份对行进行扫描，另一份对列经行扫描，存在三个以上相连的部分就标记为<code>&#39;0&#39;</code>,最后对两张地图进行整合，去除所有标记为<code>&#39;0&#39;</code>的方块。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>(未校验)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[][] match(<span class="hljs-type">char</span>[][] map, <span class="hljs-type">char</span>[][] map1) &#123;<br>    <span class="hljs-comment">// 行、列消除</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; k &lt;= <span class="hljs-number">8</span>; k++) &#123; <span class="hljs-comment">// 三连到八连的情况</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; map.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; map[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (checkConsecutive(map, i, j, k, <span class="hljs-string">&#x27;0&#x27;</span>)) &#123;<br>                    markConsecutive(map, i, j, k, <span class="hljs-string">&#x27;0&#x27;</span>);<br>                    j += k - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; map1[<span class="hljs-number">0</span>].length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; map1.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (checkConsecutive(map1, j, i, k, <span class="hljs-string">&#x27;0&#x27;</span>)) &#123;<br>                    markConsecutive(map1, j, i, k, <span class="hljs-string">&#x27;0&#x27;</span>);<br>                    j += k - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 整合</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; map.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; map[i].length; j++) &#123;<br>            map[i][j] = (map[i][j] == <span class="hljs-string">&#x27;0&#x27;</span> || map1[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> : map[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br><br><span class="hljs-comment">// 检查是否存在连续的字符</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkConsecutive</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] map, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">int</span> length, <span class="hljs-type">char</span> target)</span> &#123;<br>    <span class="hljs-keyword">if</span> (col + length &gt; map[row].length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (map[row][col + i] != target) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 标记连续的字符</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">markConsecutive</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] map, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">int</span> length, <span class="hljs-type">char</span> mark)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        map[row][col + i] = mark;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="让悬空的方块掉落"><a href="#让悬空的方块掉落" class="headerlink" title="让悬空的方块掉落"></a>让悬空的方块掉落</h2><p>遍历即可，还可以加入一些特殊的判断，比如边界、禁止方块等。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">fall</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> map[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> map.length;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; width; x++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">emptyY</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> height - <span class="hljs-number">1</span>; y &gt;= <span class="hljs-number">0</span>; y--) &#123;<br>            <span class="hljs-keyword">if</span> (map[y][x] == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (emptyY == -<span class="hljs-number">1</span>) &#123;<br>                    emptyY = y;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (map[y][x] != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (emptyY != -<span class="hljs-number">1</span>) &#123;<br>                    map[emptyY][x] = map[y][x];<br>                    map[y][x] = <span class="hljs-number">0</span>;<br>                    emptyY--;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (map[y][x] == -<span class="hljs-number">1</span>) &#123;<br>                emptyY = -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="技术部分"><a href="#技术部分" class="headerlink" title="技术部分"></a>技术部分</h1><p>这部分存在一些超纲知识，如果对你来说太难了，可以跳过不看~。</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h3><p>Git是一种分布式版本控制系统，用于跟踪和管理软件开发项目中的代码变更。它被广泛用于协作开发和版本管理，可以帮助团队成员在不同的开发环境中协同工作，并记录每个修改的历史。</p>
<h3 id="如何使用GitHub"><a href="#如何使用GitHub" class="headerlink" title="如何使用GitHub"></a>如何使用GitHub</h3><p>GitHub 教程：<a href="https://zhuanlan.zhihu.com/p/369486197">https://zhuanlan.zhihu.com/p/369486197</a></p>
<h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><h3 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h3><p>Swing是一个比较传统的GUI框架，由于课程中会讲解swing以及本人用了JavaFX，这里做简单介绍。</p>
<blockquote>
<p>ChatGPT : Swing是Java平台上的一套GUI（图形用户界面）工具包，它提供了一系列的组件和工具，用于构建桌面应用程序的用户界面。下面是一些关键的概念和组件，帮助你入门Swing：</p>
<ul>
<li>JFrame：JFrame是Swing中的顶级窗口组件，它代表了一个可调整大小的窗口。你可以创建一个JFrame对象，并在其中添加其他组件，如按钮、文本框等。</li>
<li>JPanel：JPanel是Swing中的容器组件，用于组织和布局其他组件。你可以将多个组件添加到JPanel中，并使用布局管理器来控制它们的位置和大小。</li>
<li>JButton：JButton是一个按钮组件，用于触发特定的操作。你可以创建一个JButton对象，并为其设置文本、图标和事件处理程序，以便在用户点击按钮时执行相应的操作。</li>
<li>JLabel：JLabel是一个标签组件，用于显示文本或图像。你可以创建一个JLabel对象，并将其添加到窗口中，以显示一些静态文本或图像。</li>
<li>JTextField：JTextField是一个文本框组件，用于接收用户的输入。你可以创建一个JTextField对象，并将其添加到窗口中，以便用户可以输入文本。</li>
<li>LayoutManager：布局管理器是Swing中用于管理组件布局的工具。Swing提供了多种布局管理器，如FlowLayout、BorderLayout和GridLayout等，它们可以帮助你自动调整和排列组件的位置和大小。</li>
<li>事件处理：Swing使用事件模型来处理用户的交互操作，例如点击按钮、输入文本等。你可以为组件注册事件监听器，并在事件发生时执行相应的操作。</li>
<li>这只是Swing的一小部分内容，它还提供了许多其他组件和功能，如复选框、下拉列表、对话框等。你可以通过阅读Swing的官方文档或参考一些教程和示例来深入学习和实践Swing。开始使用Swing时，建议从简单的示例开始，逐步探索并构建更复杂的界面。祝你在学习Swing的过程中取得成功！</li>
</ul>
</blockquote>
<h3 id="Swing-可视化开发"><a href="#Swing-可视化开发" class="headerlink" title="Swing 可视化开发"></a>Swing 可视化开发</h3><p>开发图形化界面，离不开可视化的开发界面。<br>关于Swing的GUI设计器的食用方法，可以看看官方文档<a href="https://www.jetbrains.com/help/idea/gui-designer-basics.html">https://www.jetbrains.com/help/idea/gui-designer-basics.html</a>。</p>
<h2 id="JavaFX"><a href="#JavaFX" class="headerlink" title="JavaFX"></a>JavaFX</h2><p>先来个简单的介绍</p>
<blockquote>
<p>ChatGPT ： JavaFX是Java平台上的一套现代化的GUI（图形用户界面）工具包，用于构建丰富、交互式的桌面和移动应用程序的用户界面。下面是一些关键的概念和组件，帮助你了解JavaFX：</p>
<ul>
<li>Stage和Scene：在JavaFX中，应用程序的顶级容器是Stage，它代表了一个窗口。每个Stage包含一个或多个Scene，Scene定义了窗口中的内容和布局。</li>
<li>Node：Node是JavaFX中的基本构建块，它代表了界面上的一个可视元素。JavaFX提供了许多内置的Node子类，如Button、Label、TextField等，你还可以创建自定义的Node。</li>
<li>Layout：JavaFX提供了多种布局管理器，如VBox、HBox、BorderPane等，用于控制Node的位置和大小。布局管理器可以帮助你自动调整和排列节点，以适应不同的窗口大小和屏幕分辨率。</li>
<li>CSS样式：JavaFX支持使用CSS（层叠样式表）来为界面元素设置样式。你可以使用CSS来定义节点的外观、背景、字体等属性，以及定义动画和过渡效果。</li>
<li>事件处理：JavaFX使用事件模型来处理用户的交互操作，例如点击按钮、拖动滑块等。你可以为节点注册事件处理器，并在事件发生时执行相应的操作。</li>
<li>动画和效果：JavaFX提供了丰富的动画和效果支持，可以实现平滑的过渡、缩放、旋转等效果，以及渐变、阴影、模糊等视觉效果。</li>
<li>多媒体和图形：JavaFX内置了对多媒体和图形的支持，你可以播放音频和视频文件，加载和显示图像，创建图形和图表等。</li>
<li>JavaFX还提供了其他一些功能，如WebView（用于显示Web内容）、打印支持、国际化等。JavaFX的设计目标是提供一个现代化、易用且高性能的GUI开发框架，它在Java平台上得到了广泛的应用和支持。</li>
<li>你可以通过阅读JavaFX的官方文档、教程和示例来深入学习和实践JavaFX。开始使用JavaFX时，建议从简单的示例开始，逐步探索和构建更复杂的界面。祝你在学习JavaFX的过程中取得成功！</li>
</ul>
</blockquote>
<h3 id="Scene-Builder"><a href="#Scene-Builder" class="headerlink" title="Scene Builder"></a>Scene Builder</h3><p>JavaFX Scene Builder是一个可视化布局工具，用于设计和构建JavaFX应用程序的用户界面。它提供了拖放和配置组件的界面，简化了界面布局的过程。你可以选择组件、调整大小和位置，并设置CSS样式和事件处理。它与JavaFX紧密集成，可以与Java IDE配合使用。Scene Builder是一个强大而直观的工具，加速了JavaFX界面开发的过程。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li><p>Scene Builder 的安装网址: <a href="https://www.oracle.com/java/technologies/javafxscenebuilder-1x-archive-downloads.html">https://www.oracle.com/java/technologies/javafxscenebuilder-1x-archive-downloads.html</a></p>
</li>
<li><p>选择合适的版本下载</p>
</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_1.png" class="" title="scenebuilder">

<ol start="3">
<li>可能需要登录Oracle账号，注册一个即可</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_2.png" class="" title="scenebuilder">

<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_3.png" class="" title="scenebuilder">

<ol start="4">
<li>下载完后打开，根据引导完成安装</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_4.png" class="" title="scenebuilder">

<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_5.png" class="" title="scenebuilder">

<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_6.png" class="" title="scenebuilder">

<ol start="5">
<li>接下来进行idea的配置：在新版本中，JavaFX插件已经内置，旧版本可<br>能需要手动下载。</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_7.png" class="" title="scenebuilder">

<ol start="6">
<li>接下来进行软件的绑定，如图设置SceneBuilder的运行路径即可。</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/scenebuilder_8.png" class="" title="scenebuilder">

<h3 id="HelloWorld-第一个JavaFx程序"><a href="#HelloWorld-第一个JavaFx程序" class="headerlink" title="HelloWorld-第一个JavaFx程序"></a>HelloWorld-第一个JavaFx程序</h3><ol>
<li>创建JavaFX项目，如图选择</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_1.png" class="" title="javaFx">

<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_2.png" class="" title="javaFx">

<ol start="2">
<li>初始程序</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_3.png" class="" title="javaFx">

<ol start="3">
<li>右键 <code>hello-view.fxml</code> -&gt; 选择<code>在SceneBuilder 中打开</code></li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_4.png" class="" title="javaFx">

<ol start="4">
<li>SceneBuilder 界面如图</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_5.png" class="" title="javaFx">

<ol start="5">
<li>Controller中可以设置对应的控制类(示例代码已经给出对应的控制类)</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_6.png" class="" title="javaFx">

<ol start="6">
<li>如何设置监听事件<br>如图，选择控件 &gt; 切换到code界面 &gt; 在想要监听的事件处写上方法名</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_7.png" class="" title="javaFx">

<ol start="7">
<li>保存fxml文件，回到控制类，写上同名的控制方法。注意用<code>@FXML</code>标记。</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_8.png" class="" title="javaFx">

<ol start="8">
<li>运行查看成果~</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_9.png" class="" title="javaFx">

<h3 id="一些食用技巧"><a href="#一些食用技巧" class="headerlink" title="一些食用技巧"></a>一些食用技巧</h3><h4 id="Scene-Builder-预览界面"><a href="#Scene-Builder-预览界面" class="headerlink" title="Scene Builder 预览界面"></a>Scene Builder 预览界面</h4><img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_10.png" class="" title="javaFx">

<h4 id="Scene-Builder-控制类代码示例"><a href="#Scene-Builder-控制类代码示例" class="headerlink" title="Scene Builder 控制类代码示例"></a>Scene Builder 控制类代码示例</h4><p>快速生成控制类的代码~</p>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_11.png" class="" title="javaFx">

<h4 id="Scene-Builder-使用CSS"><a href="#Scene-Builder-使用CSS" class="headerlink" title="Scene Builder 使用CSS"></a>Scene Builder 使用CSS</h4><img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_12.png" class="" title="javaFx">

<p>具体规则可参考：<a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html">https://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html</a></p>
<h4 id="JavaFX-多界面切换"><a href="#JavaFX-多界面切换" class="headerlink" title="JavaFX 多界面切换"></a>JavaFX 多界面切换</h4><p>目录结构如下</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><code class="hljs xl">H<span class="hljs-function"><span class="hljs-title">elloController</span>.java -&gt;</span> 主界面控制类<br>O<span class="hljs-function"><span class="hljs-title">therPage</span>.java -&gt;</span> 界面<span class="hljs-number">2</span>控制类<br><br><span class="hljs-function"><span class="hljs-title">hello</span>-view.fxml -&gt;</span> 主界面<br>O<span class="hljs-function"><span class="hljs-title">therPage</span> -&gt;</span> 界面<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_13.png" class="" title="javaFx">

<ol>
<li>OtherPage.fxml 设置</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_14.png" class="" title="javaFx">

<ol start="2">
<li>源码<br>HelloController.java<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">private</span> Label welcomeText;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">btnClick</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Stage</span> <span class="hljs-variable">primaryStage</span> <span class="hljs-operator">=</span> (Stage) welcomeText.getScene().getWindow();<br>        <span class="hljs-comment">//加载fxml文件</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> getClass().getResource(<span class="hljs-string">&quot;OtherPage.fxml&quot;</span>);<br>        <span class="hljs-comment">//加载完fxml文件后，获取其中的root</span><br>        <span class="hljs-type">Parent</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> FXMLLoader.load(Objects.requireNonNull(url));<br>        <span class="hljs-comment">//设置场景</span><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>        primaryStage.setScene(scene);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
OtherPage.java<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherPage</span> &#123;<br>    <span class="hljs-meta">@FXML</span><br>    Button btn;<br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">gotoMain</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Stage</span> <span class="hljs-variable">primaryStage</span> <span class="hljs-operator">=</span> (Stage) btn.getScene().getWindow();<br>        <span class="hljs-comment">//加载fxml文件</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> getClass().getResource(<span class="hljs-string">&quot;hello-view.fxml&quot;</span>);<br>        <span class="hljs-comment">//加载完fxml文件后，获取其中的root</span><br>        <span class="hljs-type">Parent</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> FXMLLoader.load(Objects.requireNonNull(url));<br>        <span class="hljs-comment">//设置场景</span><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>        primaryStage.setScene(scene);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>效果</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javaFx_15.png" class="" title="javaFx">

<h4 id="JavaFX-播放音频"><a href="#JavaFX-播放音频" class="headerlink" title="JavaFX 播放音频"></a>JavaFX 播放音频</h4><p>下面是一个简单的音频播放类，其中包含一个静态方法用于播放音频。你可以将以下代码保存到一个名为AudioPlayer.java的文件中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javafx.scene.media.Media;<br><span class="hljs-keyword">import</span> javafx.scene.media.MediaPlayer;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AudioPlayer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playAudio</span><span class="hljs-params">(String audioFilePath)</span> &#123;<br>        <span class="hljs-type">Media</span> <span class="hljs-variable">media</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Media</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(audioFilePath).toURI().toString());<br>        <span class="hljs-type">MediaPlayer</span> <span class="hljs-variable">mediaPlayer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaPlayer</span>(media);<br>        mediaPlayer.play();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>你需要在 <code>pom.xml</code> 中配置依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjfx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafx-media<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>19.0.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>使用示例：<br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//播放音频</span><br><span class="hljs-comment">//确保文件存在于resources对应的文件夹下</span><br><span class="hljs-keyword">try</span> &#123;<br>    AudioPlayer.playAudio(getClass().getResource(<span class="hljs-string">&quot;sample.mp3&quot;</span>).getPath());<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="JavaFX就介绍到这里，更多操作自行探索吧"><a href="#JavaFX就介绍到这里，更多操作自行探索吧" class="headerlink" title="JavaFX就介绍到这里，更多操作自行探索吧~"></a>JavaFX就介绍到这里，更多操作自行探索吧~</h4><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>根据不同的项目，可以按照需求选择要不要写服务端。</p>
<h3 id="服务端可以干什么"><a href="#服务端可以干什么" class="headerlink" title="服务端可以干什么"></a>服务端可以干什么</h3><blockquote>
<p>GPT: 游戏的服务器端通常承担着多个功能和责任。以下是游戏服务器端可能承担的一些常见任务和功能：</p>
<ol>
<li>游戏逻辑处理：服务器端负责处理游戏的逻辑和规则。它会验证和执行玩家的操作，并确保游戏状态的一致性和合法性。服务器端会处理游戏中的各种事件、计算分数、处理胜负条件等。</li>
<li>网络通信：服务器端负责处理与客户端之间的网络通信。它接收来自客户端的请求和指令，并将游戏状态和更新发送回客户端。服务器端还负责处理网络连接、数据传输和通信协议等相关任务。</li>
<li>用户管理：服务器端负责管理玩家的账户、角色和权限等信息。它可以处理用户注册、登录、验证和身份验证等操作。服务器端还可以管理玩家之间的好友关系、排行榜、成就系统等。</li>
<li>数据存储和持久化：服务器端负责将游戏数据存储在持久化存储介质中，如数据库或文件系统。它可以存储玩家的进度、成就、物品、排行榜数据等。服务器端还可以处理数据的读取、写入和查询等操作。</li>
<li>多人游戏支持：服务器端支持多人游戏模式，允许多个玩家同时参与游戏。它可以处理玩家之间的交互、同步游戏状态、处理多个并发操作等。</li>
<li>安全和防作弊：服务器端负责确保游戏的安全性和防止作弊行为。它可以验证客户端请求的合法性，检测和阻止作弊行为，并采取必要的安全措施来保护玩家的数据和隐私。</li>
<li>扩展和维护：服务器端需要具备可扩展性和易于维护的特性。它应该能够处理大量玩家的同时在线，支持游戏的更新和扩展，以及进行服务器的监控和维护。<br>这些只是游戏服务器端可能承担的一些常见任务和功能。具体的服务器端功能取决于游戏的类型、规模和需求。不同的游戏可能有不同的服务器端架构和功能设计。</li>
</ol>
</blockquote>
<h3 id="http-https服务器框架推荐"><a href="#http-https服务器框架推荐" class="headerlink" title="http&#x2F;https服务器框架推荐"></a>http&#x2F;https服务器框架推荐</h3><p>直接用就行，不会扣分<br><br>javalin : <a href="https://javalin.io/documentation#getting-started">https://javalin.io/documentation#getting-started</a> &lt;-有详细的官方教程，也可以参考我的后端项目 <a href="https://github.com/xCipHanD/happyMatchServer">https://github.com/xCipHanD/happyMatchServer</a></p>
<h3 id="简单的javalin程序"><a href="#简单的javalin程序" class="headerlink" title="简单的javalin程序"></a>简单的javalin程序</h3><ol>
<li>需要先配置 <code>pom.xml</code>，在里面加上这一段<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.javalin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javalin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li>创建主类 <code>Main.java</code><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.javalin.Javalin;<br><span class="hljs-keyword">import</span> io.javalin.http.staticfiles.Location;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> io.javalin.apibuilder.ApiBuilder.*;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Javalin</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> Javalin.create(config -&gt; &#123;<br>            <span class="hljs-comment">//静态资源,可以放置一些文件、图片、音频、视频等静态文件。</span><br>            config.staticFiles.add(staticFiles -&gt; &#123;<br>                <span class="hljs-comment">//外部访问路径 如 http://ip:port/res/files/example.file</span><br>                staticFiles.hostedPath = <span class="hljs-string">&quot;/res/files&quot;</span>;<br>                <span class="hljs-comment">//内部文件存储路径(可自定义) 这里写的是运行目录下files文件夹</span><br>                <span class="hljs-comment">//如果文件夹不存在，则创建文件夹</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/files&quot;</span>;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>                <span class="hljs-keyword">if</span> (!directory.exists() &amp;&amp; !directory.mkdirs()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;文件夹创建失败&quot;</span>);<br>                    System.exit(<span class="hljs-number">1</span>);<br>                &#125;<br>                staticFiles.directory = directoryPath;<br>            &#125;);<br>        &#125;).start(<span class="hljs-number">80</span>);<br><br>        <span class="hljs-comment">// 访问默认路径的输出，可以放个主页什么的</span><br>        app.get(<span class="hljs-string">&quot;/&quot;</span>, ctx -&gt; ctx.result(<span class="hljs-string">&quot;Hello World!&quot;</span>));<br><br>        <span class="hljs-comment">//路由不同路径，这里将 Controller中fromGet()路由到/api下，并且方法为GET；fromPost()路由到/api下，方法为POST。</span><br>        app.routes(() -&gt; &#123;<br>            path(<span class="hljs-string">&quot;/api&quot;</span>, () -&gt; get(Controller::fromGet));<br>            path(<span class="hljs-string">&quot;/api&quot;</span>, () -&gt; post(Controller::fromPost));<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>控制类 <code>Controller.java</code><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.javalin.http.Context;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fromGet</span><span class="hljs-params">(Context ctx)</span> &#123;<br>        ctx.contentType(<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>);<br>        String flag,result;<br>        <span class="hljs-keyword">try</span> &#123;<br>            flag = ctx.queryParam(<span class="hljs-string">&quot;flag&quot;</span>);<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<span class="hljs-comment">//如果flag为空，则抛出异常</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag.equals(<span class="hljs-string">&quot;kfccrazythursdayvme50&quot;</span>)) &#123;<br>                result = <span class="hljs-string">&quot;No Way!&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                result = <span class="hljs-string">&quot;Your flag is: &quot;</span> + flag;<br>            &#125;<br>            ctx.status(<span class="hljs-number">200</span>);<span class="hljs-comment">//设置正常的状态码</span><br>            ctx.result(result);<span class="hljs-comment">//设置返回内容</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            ctx.status(<span class="hljs-number">400</span>);<br>            ctx.result(<span class="hljs-string">&quot;参数不全&quot;</span>);<br>            <span class="hljs-comment">//如果无法解析参数，则报错</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>运行查看效果</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javalin_1.png" class="" title="javalin">

<ol start="5">
<li>用浏览器访问服务</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javalin_2.png" class="" title="javalin">

<img src="/2023/12/29/CS109-Project-HappyMatch/javalin_3.png" class="" title="javalin">

<img src="/2023/12/29/CS109-Project-HappyMatch/javalin_4.png" class="" title="javalin">


<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><h4 id="序列化是什么"><a href="#序列化是什么" class="headerlink" title="序列化是什么"></a>序列化是什么</h4><blockquote>
<p>序列化是将对象转换为字节流或其他可存储或传输的格式的过程。在序列化过程中，对象的状态被转换为字节序列，以便可以在网络上传输或存储到磁盘上。反之，将字节流或其他序列化格式转换回对象的过程称为反序列化。<br>序列化的主要用途如下：</p>
<ol>
<li>数据持久化：通过序列化，可以将对象保存到磁盘上，以便在程序重新启动时恢复对象的状态。这对于需要长时间保存数据或在不同的系统之间传输数据非常有用。</li>
<li>数据传输：在网络通信中，可以使用序列化将对象转换为字节流，然后通过网络传输给其他系统。接收方可以通过反序列化将字节流转换回对象，从而获取原始数据。</li>
<li>分布式计算：在分布式系统中，不同的计算节点可能需要交换数据。通过序列化和反序列化，可以在节点之间传输对象，以便进行协作和共享数据。</li>
<li>缓存和消息队列：序列化还可以用于将对象存储在缓存中或发送到消息队列中。这样可以提高系统的性能和可扩展性。<br>总之，序列化是一种将对象转换为字节流或其他可存储或传输的格式的机制，它在数据持久化、数据传输、分布式计算以及缓存和消息队列等方面都有重要的应用。</li>
</ol>
</blockquote>
<h4 id="序列化有哪些"><a href="#序列化有哪些" class="headerlink" title="序列化有哪些"></a>序列化有哪些</h4><blockquote>
<p>常见的序列化方式有以下几种：</p>
<ol>
<li>JSON（JavaScript Object Notation）：JSON是一种轻量级的数据交换格式，它以文本形式表示结构化的数据。JSON序列化将对象转换为字符串，可以方便地在不同的系统之间传输和存储数据。主流编程语言都提供了JSON的序列化和反序列化库。</li>
<li>XML（eXtensible Markup Language）：XML是一种标记语言，用于描述和存储数据。XML序列化将对象转换为XML格式的字符串，可以用于数据交换和存储。与JSON相比，XML更为灵活，但也更为冗长。</li>
<li>Protocol Buffers：Protocol Buffers是Google开发的一种高效的二进制序列化格式。它使用描述文件定义数据结构，然后通过编译器生成相应的代码，用于序列化和反序列化。Protocol Buffers具有高效、紧凑和跨平台的特点，被广泛应用于分布式系统和通信协议中。</li>
<li>YAML（YAML Ain’t Markup Language）：YAML是一种人类可读的数据序列化格式，常用于配置文件和数据交换。YAML序列化将对象转换为YAML格式的字符串，具有易读性和可维护性。</li>
<li>BSON（Binary JSON）：BSON是一种二进制表示的JSON格式，用于在MongoDB数据库中存储和传输数据。BSON序列化将对象转换为二进制格式，具有高效性和可扩展性。<br>除了上述常见的序列化方式，不同的编程语言还可能提供自己的序列化机制，如Java中的Java Serialization、C#中的BinaryFormatter等。这些方式在特定语言和环境中具有一定的优势和适用性。</li>
</ol>
</blockquote>
<h4 id="为什么要在服务器和客户端的通信中使用序列化"><a href="#为什么要在服务器和客户端的通信中使用序列化" class="headerlink" title="为什么要在服务器和客户端的通信中使用序列化"></a>为什么要在服务器和客户端的通信中使用序列化</h4><p>主要是方便数据传输：</p>
<p>1.数据传输：服务器和客户端之间需要传输数据，而数据在网络传输中需要以字节流的形式进行传输。序列化可以将对象转换为字节流，使得数据可以在网络上传输。反序列化则可以将字节流转换回对象，以便在接收方进行处理和使用。</p>
<p>2.跨平台通信：服务器和客户端可能运行在不同的操作系统或编程语言中，它们的数据表示方式可能不同。通过使用一种通用的序列化格式，如JSON、XML或Protocol Buffers，可以将对象转换为中立的格式，使得不同平台之间可以相互理解和交换数据。</p>
<h4 id="如何食用-Json"><a href="#如何食用-Json" class="headerlink" title="如何食用 Json~"></a>如何食用 <code>Json</code>~</h4><ol>
<li>先在<code>pom.xml</code>中导入<code>fastjson</code>库<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><code>Controller.java</code><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fromPost</span><span class="hljs-params">(Context ctx)</span> &#123;<br>    ctx.contentType(<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>);<br>    String flag;<br>    <span class="hljs-keyword">try</span> &#123;<br>        flag = ctx.formParam(<span class="hljs-string">&quot;flag&quot;</span>);<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<span class="hljs-comment">//如果flag为空，则抛出异常</span><br>        &#125;<br>        <span class="hljs-comment">//使用fastjson解析flag</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONObject.parseObject(flag);<br>        <span class="hljs-comment">//返回flag节点数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Your flag has &quot;</span> + jsonObject.size() + <span class="hljs-string">&quot; nodes&quot;</span>;<br>        ctx.status(<span class="hljs-number">200</span>);<br>        ctx.result(result);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        ctx.status(<span class="hljs-number">400</span>);<br>        ctx.result(<span class="hljs-string">&quot;参数不全&quot;</span>);<br>        <span class="hljs-comment">//如果无法解析参数，则报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>运行服务器，使用<code>postman</code>工具进行测试 (postman的安装和使用在此不做展开)</li>
</ol>
<img src="/2023/12/29/CS109-Project-HappyMatch/javalin_5.png" class="" title="javalin">

<h2 id="Socket-编程"><a href="#Socket-编程" class="headerlink" title="Socket 编程"></a>Socket 编程</h2><h3 id="什么是-Socket"><a href="#什么是-Socket" class="headerlink" title="什么是 Socket"></a>什么是 Socket</h3><blockquote>
<p>Socket（套接字）是计算机网络中用于实现网络通信的一种机制。它提供了一种编程接口，使得应用程序能够通过网络进行数据的发送和接收。</p>
<p>在网络通信中，Socket 是一种抽象概念，表示网络中的一个端点。一个 Socket 包含了一个 IP 地址和一个端口号，它用于标识网络中的一个特定的应用程序。</p>
<p>Socket 可以用于不同的网络通信协议，如 TCP（传输控制协议）和 UDP（用户数据报协议）。TCP 是一种面向连接的协议，提供可靠的、有序的、基于字节流的通信。UDP 是一种无连接的协议，提供不可靠的、无序的、基于数据报的通信。</p>
<p>在编程中，使用 Socket API 可以创建一个 Socket 对象，通过该对象进行网络通信。通过 Socket，应用程序可以建立连接、发送数据、接收数据和关闭连接。</p>
</blockquote>
<h3 id="什么情况用http服务端，什么时候用-Socket"><a href="#什么情况用http服务端，什么时候用-Socket" class="headerlink" title="什么情况用http服务端，什么时候用 Socket"></a>什么情况用http服务端，什么时候用 Socket</h3><p>当涉及到用户操作和服务器操作的隔离时，HTTP 服务器可以起到很好的作用。通过使用 HTTP 服务器，用户可以通过发送 HTTP 请求与服务器进行通信，而服务器可以根据请求来执行相应的操作。这种方式可以将用户操作与服务器操作分离开来，使得服务器可以独立处理请求并提供相应的响应。HTTP 服务器可以接收用户请求，执行相应的逻辑，然后返回结果给用户。</p>
<p>此外，HTTP 服务器还可以结合数据存储和游戏逻辑处理。HTTP 服务器可以与数据库或其他数据存储系统进行交互，以读取、写入和更新数据。例如，用户可以通过 HTTP 请求发送游戏数据到服务器，服务器将数据存储在数据库中，并在需要时进行游戏逻辑处理。HTTP 服务器可以提供接口来处理用户请求，并将数据存储和游戏逻辑处理委托给其他组件或服务。</p>
<p>另一方面，Socket 在局域网多人联机等场景中发挥重要作用。Socket 提供了一种实时的、双向的数据传输机制，适用于需要高实时性和低延迟的应用场景，如多人联机游戏。通过 Socket，多个玩家可以建立连接并在局域网中进行实时的游戏通信。Socket 允许玩家之间实时地发送和接收游戏数据，以保持游戏状态的同步和交互。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>挖个坑，日后补上，这里先引用几篇网上的教程：</p>
<p>基于 Java 简单实现 Socket 通信 <a href="https://zhuanlan.zhihu.com/p/441460332">https://zhuanlan.zhihu.com/p/441460332</a></p>
<p>Java 实现简单的 Socket 通信 <a href="https://www.cnblogs.com/robothy/p/14211690.html">https://www.cnblogs.com/robothy/p/14211690.html</a></p>
<h1 id="一些碎碎念"><a href="#一些碎碎念" class="headerlink" title="一些碎碎念"></a>一些碎碎念</h1><p>万事开头难，前期写铺垫代码的部分总是枯燥的。但一旦你打好了地基，你会发现，想要实现一个新功能时，可以凭借对于项目框架的熟悉，很快地打出你的组合拳（Ctrl C+V），这也是为什么我建议有能力的同学抛弃掉老师给的demo，自己实现一套框架。</p>
<p>非常感谢你能看到这里，希望这篇文章能帮你减轻一些写project的负担，预祝你在答辩中获得好成绩。o(<em>￣▽￣</em>)ブ</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>project</tag>
        <tag>cs109</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次对网易云前端接口的逆向</title>
    <url>/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="记一次对网易云前端接口的逆向"><a href="#记一次对网易云前端接口的逆向" class="headerlink" title="记一次对网易云前端接口的逆向"></a>记一次对网易云前端接口的逆向</h1><h2 id="从二维码登录接口入手"><a href="#从二维码登录接口入手" class="headerlink" title="从二维码登录接口入手"></a>从二维码登录接口入手</h2><ol>
<li>界面如图</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/1-min.png" class="">

<ol start="2">
<li>扫个码看看</li>
</ol>
<p>是一串链接，有一个 <code>codekey</code> 参数</p>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/2-min.png" class="">

<ol start="3">
<li>打开控制台抓包，找到关键的数据包，返回的<code>unikey</code>对应的就是<code>codekey</code></li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/3-min.png" class="">

<ol start="4">
<li>看看payload，两个参数，<code>params</code>和<code>encSecKey</code></li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/4-min.png" class="">

<ol start="5">
<li>点入发起程序</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/5-min.png" class="">

<ol start="6">
<li>打个断点，刷新并重新触发</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/6-min.png" class="">

<ol start="7">
<li>看到了熟悉的参数</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/7-min.png" class="">
<p>下断点看看值<code>t</code></p>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/8-min.png" class="">

<ol start="8">
<li>根据堆栈一步一步往前找到生成参数的位置</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/9-min.png" class="">

<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/11-min.png" class="">

<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/12-min.png" class="">

<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/13-min.png" class="">

<ol start="9">
<li>找到了</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/14-min.png" class="">

<ol start="10">
<li>关键部位</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/15-min.png" class="">

<ol start="11">
<li>打开控制台，先看看<code>params</code>如何生成</li>
</ol>
<ol>
<li><p><code>d</code>的值</p>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/16-min.png" class="">
</li>
<li><p><code>d</code>的赋值代码</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javaScript">d = (<span class="hljs-number">0</span>,y.<span class="hljs-property">asrsea</span>)(<br>        <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c),<br>        (<span class="hljs-number">0</span>,y.<span class="hljs-property">emj2code</span>)([<span class="hljs-string">&quot;流泪&quot;</span>, <span class="hljs-string">&quot;强&quot;</span>]),<br>        y.<span class="hljs-property">BASE_CODE</span>,<br>        (<span class="hljs-number">0</span>,y.<span class="hljs-property">emj2code</span>)([<span class="hljs-string">&quot;爱心&quot;</span>, <span class="hljs-string">&quot;女孩&quot;</span>, <span class="hljs-string">&quot;惊恐&quot;</span>, <span class="hljs-string">&quot;大笑&quot;</span>]<br>    )<br></code></pre></td></tr></table></figure>
<p>其中 <code>(0,y.emj2code)([&quot;流泪&quot;, &quot;强&quot;])</code> 相当于 <code>y.emj2code([&quot;流泪&quot;, &quot;强&quot;])</code></p>
<ol start="3">
<li>进一步发现，这几个值应该都是常量</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javaScript">&gt; <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(c)<br><span class="hljs-string">&#x27;&#123;&quot;type&quot;:1,&quot;noCheckToken&quot;:true&#125;&#x27;</span><br><br>&gt; (<span class="hljs-number">0</span>,y.<span class="hljs-property">emj2code</span>)([<span class="hljs-string">&quot;流泪&quot;</span>, <span class="hljs-string">&quot;强&quot;</span>])<br><span class="hljs-string">&#x27;010001&#x27;</span><br><br>&gt; y.<span class="hljs-property">BASE_CODE</span><br><span class="hljs-string">&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span><br><br>&gt; (y.<span class="hljs-property">emj2code</span>)([<span class="hljs-string">&quot;爱心&quot;</span>, <span class="hljs-string">&quot;女孩&quot;</span>, <span class="hljs-string">&quot;惊恐&quot;</span>, <span class="hljs-string">&quot;大笑&quot;</span>])<br><span class="hljs-string">&#x27;0CoJUm6Qyw8W8jud&#x27;</span><br></code></pre></td></tr></table></figure>

<ol start="4">
<li>接着分析<code>y.asrsea</code>函数</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/17-min.png" class="">

<p>打个断点，运行到这里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javaScript">t.<span class="hljs-property">asrsea</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e, t, n, r</span>) &#123;<span class="hljs-comment">//e,t,n,r是上文中提到的常量</span><br>            <span class="hljs-keyword">var</span> o = &#123;&#125;<br>              , i = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t, n = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>, r = <span class="hljs-string">&quot;&quot;</span>, o = <span class="hljs-number">0</span>; o &lt; e; o += <span class="hljs-number">1</span>)<br>                    t = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * n.<span class="hljs-property">length</span>,<br>                    t = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(t),<br>                    r += n.<span class="hljs-title function_">charAt</span>(t);<br>                <span class="hljs-keyword">return</span> r<br>            &#125;(<span class="hljs-number">16</span>);<br>            <span class="hljs-keyword">return</span> o.<span class="hljs-property">encText</span> = <span class="hljs-title function_">a</span>(e, r), <span class="hljs-comment">//进行了两次加密获取到encText</span><br>            o.<span class="hljs-property">encText</span> = <span class="hljs-title function_">a</span>(o.<span class="hljs-property">encText</span>, i),<br>            o.<span class="hljs-property">encSecKey</span> = <span class="hljs-title function_">u</span>(i, t, n),<span class="hljs-comment">//进行一次加密获取到enSecKey</span><br>            o<br>        &#125;<br></code></pre></td></tr></table></figure>

<ol start="5">
<li>看看 <code>a</code> 函数</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/18-min.png" class="">

<p><code>AES</code>、<code>iv</code>、<code>CBC</code> 没加密字段，一看就知道啥加密方式了 XD</p>
<blockquote>
<p>使用了AES的CBC模式进行加密，<code>e</code>为待加密文本，<code>t</code>为密钥，偏移量<code>iv</code>是<code>0102030405060708</code></p>
</blockquote>
<ol start="6">
<li>验证一下，对上了</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/19-min.png" class="">

<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/20-min.png" class="">

<ol start="7">
<li>第二次加密同理，使用<code>m3iws/mCg11hFMWMpeAXIJ33nggE141odvQwXdMOvv8=</code>为密文，随机的16位a-zA-Z0-9字符作为密钥。</li>
</ol>
<ol start="12">
<li>再看看 <code>encSecKey</code>怎么生成</li>
</ol>
<ol>
<li>很巧，就在 <code>a</code> 函数附近， <code>u</code> 函数就是用来生成 <code>encSecKey</code> 的</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/21-min.png" class="">

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">u</span>(<span class="hljs-params">e, t, n</span>) &#123;<span class="hljs-comment">// e是随机的16位密钥，t是10001(十六进制的65537)，n是前文提到的base_code</span><br>            <span class="hljs-keyword">return</span> i.<span class="hljs-property">default</span>.<span class="hljs-title function_">setMaxDigits</span>(<span class="hljs-number">131</span>),<br>            n = <span class="hljs-keyword">new</span> i.<span class="hljs-property">default</span>.<span class="hljs-title class_">RSAKeyPair</span>(t,<span class="hljs-string">&quot;&quot;</span>,n),<br>            i.<span class="hljs-property">default</span>.<span class="hljs-title function_">encryptedString</span>(n, e)<br>        &#125;<br></code></pre></td></tr></table></figure>
<ol start="2">
<li>三个函数</li>
</ol>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/22-min.png" class="">

<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/23-min.png" class="">

<ol start="3">
<li><p>到这里第一眼没看出来是什么加密方法，看函数名应该和RSA有关。把代码喂给ChatGPT，告诉我是一个<code>nopadding</code>的RSA加密。</p>
</li>
<li><p>开开心心让它写了一段RSA加密的python代码来验证。</p>
<p> 然后傻眼了，加密结果一直在变，前端的加密结果是不变的。</p>
<p> 又花了一段时间在互联网搜寻一番，发现了原来python的rsa没有实现nopadding的加密。。。</p>
<p> 从网上找了一篇解决方案<a href="https://www.cnblogs.com/pythonClub/p/10464745.html">https://www.cnblogs.com/pythonClub/p/10464745.html</a></p>
</li>
<li><p>校验一下，没问题</p>
</li>
</ol>
<h2 id="看看其他的接口"><a href="#看看其他的接口" class="headerlink" title="看看其他的接口"></a>看看其他的接口</h2><p>分析了一下其它的接口，发现用的都是同一套加密方案。</p>
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/24-min.png" class="">
<img src="/2024/02/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E7%BD%91%E6%98%93%E4%BA%91%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%86%E5%90%91/25-min.png" class="">

<p>于是，在这里简单整理一下收集到的其他接口</p>
<h4 id="获取二维码"><a href="#获取二维码" class="headerlink" title="获取二维码"></a>获取二维码</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">POST /weapi/login/qrcode/unikey<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">POST参数</th>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>params</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> <code>&#123;&quot;type&quot;:1,&quot;noCheckToken&quot;:true&#125;</code>字符串AES加密结果</td>
</tr>
<tr>
<td align="left"><code>encSecKey</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> AES_KEY的RSA加密结果</td>
</tr>
</tbody></table>
<h4 id="获取登录状态"><a href="#获取登录状态" class="headerlink" title="获取登录状态"></a>获取登录状态</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">POST /weapi/login/qrcode/client/login<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">POST参数</th>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>params</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> <code>&#123;&quot;type&quot;:1,&quot;noCheckToken&quot;:true,&quot;key&quot;:&quot;&#123;codekey&#125;&quot;&#125;</code>字符串AES加密结果,其中<code>&#123;codekey&#125;</code>由<a href="#%E8%8E%B7%E5%8F%96%E4%BA%8C%E7%BB%B4%E7%A0%81">获取二维码</a>接口生成</td>
</tr>
<tr>
<td align="left"><code>encSecKey</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> AES_KEY的RSA加密结果</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">返回值</th>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>code</code></td>
<td align="left"><code>int</code></td>
<td align="left">800 -&gt; 二维码不存在或已过期<br>801 -&gt; 等待扫码<br>802 -&gt; 授权中<br>803 -&gt; 授权登陆成功</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left"><code>string</code></td>
<td align="left">消息</td>
</tr>
</tbody></table>
<h4 id="获取歌曲播放地址"><a href="#获取歌曲播放地址" class="headerlink" title="获取歌曲播放地址"></a>获取歌曲播放地址</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">POST /weapi/song/enhance/player/url/v1?csrf_token=&#123;csrf_token&#125;<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">POST参数</th>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>params</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> <code>&#123;&quot;ids&quot;:&quot;[&#123;song_id&#125;]&quot;,&quot;level&quot;:&quot;standard&quot;,&quot;encodeType&quot;:&quot;aac&quot;,&quot;csrf_token&quot;:&quot;&#123;csrf_token&#125;&quot;&#125;</code>字符串AES加密结果,其中<code>&#123;codekey&#125;</code>由<a href="#%E8%8E%B7%E5%8F%96%E4%BA%8C%E7%BB%B4%E7%A0%81">获取二维码</a>接口生成</td>
</tr>
<tr>
<td align="left"><code>encSecKey</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> AES_KEY的RSA加密结果</td>
</tr>
</tbody></table>
<h4 id="获取歌曲评论"><a href="#获取歌曲评论" class="headerlink" title="获取歌曲评论"></a>获取歌曲评论</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">POST /weapi/comment/resource/comments/get<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">POST参数</th>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>params</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> <code>&#123;&quot;rid&quot;:&quot;R_SO_4_&#123;song_id&#125;&quot;,&quot;threadId&quot;:&quot;R_SO_4_&#123;song_id&#125;&quot;,&quot;pageNo&quot;:&quot;&#123;pageNo&#125;&quot;,&quot;pageSize&quot;:&quot;&#123;pageSize&#125;&quot;,&quot;cursor&quot;:&quot;&#123;timeStamp&#125;&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&#123;csrf_token&#125;&quot;&#125;</code>字符串AES加密结果,其中<code>&#123;codekey&#125;</code>由<a href="#%E8%8E%B7%E5%8F%96%E4%BA%8C%E7%BB%B4%E7%A0%81">获取二维码</a>接口生成</td>
</tr>
<tr>
<td align="left"><code>encSecKey</code></td>
<td align="left"><code>string</code></td>
<td align="left"><strong>必选</strong> AES_KEY的RSA加密结果</td>
</tr>
</tbody></table>
<p>(完)</p>
]]></content>
      <tags>
        <tag>js逆向</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
